From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: verdox <mail.ysp@web.de>
Date: Mon, 27 Jan 2025 23:03:09 +0000
Subject: [PATCH] Add SerializationBehavior Draft


diff --git a/net/minecraft/server/PlayerAdvancements.java b/net/minecraft/server/PlayerAdvancements.java
index 64dbee1f67eaa17c93c13bfa38fbe27de57651e4..53931c957c2185316bfd03fdb887da1830121ad9 100644
--- a/net/minecraft/server/PlayerAdvancements.java
+++ b/net/minecraft/server/PlayerAdvancements.java
@@ -5,8 +5,6 @@ import com.google.gson.GsonBuilder;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonIOException;
 import com.google.gson.JsonParseException;
-import com.google.gson.internal.Streams;
-import com.google.gson.stream.JsonReader;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.Codec;
@@ -24,6 +22,8 @@ import java.util.Set;
 import java.util.Map.Entry;
 import java.util.function.BiConsumer;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.io.PlayerDataLoaderHelper;
 import net.minecraft.FileUtil;
 import net.minecraft.advancements.Advancement;
 import net.minecraft.advancements.AdvancementHolder;
@@ -47,19 +47,19 @@ import org.slf4j.Logger;
 
 public class PlayerAdvancements {
     private static final Logger LOGGER = LogUtils.getLogger();
-    private static final Gson GSON = new GsonBuilder().create(); // Paper - Remove pretty printing from advancements
+    public static final Gson GSON = new GsonBuilder().create(); // Paper - Remove pretty printing from advancements
     private final PlayerList playerList;
-    private final Path playerSavePath;
+    protected final Path playerSavePath;
     private AdvancementTree tree;
     private final Map<AdvancementHolder, AdvancementProgress> progress = new LinkedHashMap<>();
     private final Set<AdvancementHolder> visible = new HashSet<>();
     private final Set<AdvancementHolder> progressChanged = new HashSet<>();
     private final Set<AdvancementNode> rootsToUpdate = new HashSet<>();
-    private ServerPlayer player;
+    protected ServerPlayer player;
     @Nullable
     private AdvancementHolder lastSelectedTab;
     private boolean isFirstPacket = true;
-    private final Codec<PlayerAdvancements.Data> codec;
+    protected final Codec<PlayerAdvancements.Data> codec;
     public final Map<net.minecraft.advancements.critereon.SimpleCriterionTrigger<?>, Set<CriterionTrigger.Listener<?>>> criterionData = new java.util.IdentityHashMap<>(); // Paper - fix advancement data player leakage
 
     public PlayerAdvancements(DataFixer dataFixer, PlayerList playerList, ServerAdvancementManager manager, Path playerSavePath, ServerPlayer player) {
@@ -94,13 +94,13 @@ public class PlayerAdvancements {
         this.load(manager);
     }
 
-    private void registerListeners(ServerAdvancementManager manager) {
+    protected void registerListeners(ServerAdvancementManager manager) {
         for (AdvancementHolder advancementHolder : manager.getAllAdvancements()) {
             this.registerListeners(advancementHolder);
         }
     }
 
-    private void checkForAutomaticTriggers(ServerAdvancementManager manager) {
+    protected void checkForAutomaticTriggers(ServerAdvancementManager manager) {
         for (AdvancementHolder advancementHolder : manager.getAllAdvancements()) {
             Advancement advancement = advancementHolder.value();
             if (advancement.criteria().isEmpty()) {
@@ -110,19 +110,10 @@ public class PlayerAdvancements {
         }
     }
 
-    private void load(ServerAdvancementManager manager) {
-        if (Files.isRegularFile(this.playerSavePath)) {
-            try (JsonReader jsonReader = new JsonReader(Files.newBufferedReader(this.playerSavePath, StandardCharsets.UTF_8))) {
-                jsonReader.setLenient(false);
-                JsonElement jsonElement = Streams.parse(jsonReader);
-                PlayerAdvancements.Data data = this.codec.parse(JsonOps.INSTANCE, jsonElement).getOrThrow(JsonParseException::new);
-                this.applyFrom(manager, data);
-            } catch (JsonIOException | IOException var7) {
-                LOGGER.error("Couldn't access player advancements in {}", this.playerSavePath, var7);
-            } catch (JsonParseException var8) {
-                LOGGER.error("Couldn't parse player advancements in {}", this.playerSavePath, var8);
-            }
-        }
+    protected void load(ServerAdvancementManager manager) {
+        JsonElement jsonElement = PlayerDataLoaderHelper.data(player.getUUID()).consumeLoadedAdvancements();
+        PlayerAdvancements.Data data = this.codec.parse(JsonOps.INSTANCE, jsonElement).getOrThrow(JsonParseException::new);
+        this.applyFrom(manager, data);
 
         this.checkForAutomaticTriggers(manager);
         this.registerListeners(manager);
@@ -143,7 +134,7 @@ public class PlayerAdvancements {
         }
     }
 
-    private void applyFrom(ServerAdvancementManager advancementManager, PlayerAdvancements.Data data) {
+    protected void applyFrom(ServerAdvancementManager advancementManager, PlayerAdvancements.Data data) {
         data.forEach((path, progress) -> {
             AdvancementHolder advancementHolder = advancementManager.get(path);
             if (advancementHolder == null) {
@@ -157,7 +148,7 @@ public class PlayerAdvancements {
         });
     }
 
-    private PlayerAdvancements.Data asData() {
+    protected PlayerAdvancements.Data asData() {
         Map<ResourceLocation, AdvancementProgress> map = new LinkedHashMap<>();
         this.progress.forEach((advancementHolder, progress) -> {
             if (progress.hasProgress()) {
@@ -337,7 +328,7 @@ public class PlayerAdvancements {
         );
     }
 
-    record Data(Map<ResourceLocation, AdvancementProgress> map) {
+    protected record Data(Map<ResourceLocation, AdvancementProgress> map) {
         public static final Codec<PlayerAdvancements.Data> CODEC = Codec.unboundedMap(ResourceLocation.CODEC, AdvancementProgress.CODEC)
             .xmap(PlayerAdvancements.Data::new, PlayerAdvancements.Data::map);
 
diff --git a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index 6689aeacf50d1498e8d23cce696fb4fecbd1cf39..465f071eb349282fd3e93673749212bc65e5a39f 100644
--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -15,6 +15,8 @@ import java.util.concurrent.atomic.AtomicInteger;
 import javax.annotation.Nullable;
 import javax.crypto.Cipher;
 import javax.crypto.SecretKey;
+
+import io.papermc.paper.io.PlayerDataLoaderHelper;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.DefaultUncaughtExceptionHandler;
@@ -384,6 +386,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
                 this.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(asyncEvent.kickMessage())); // Paper - Adventure
             }
         }
+        PlayerDataLoaderHelper.load(uniqueId);
         return gameprofile; // Paper - Add more fields to AsyncPlayerPreLoginEvent
     }
     // CraftBukkit end
