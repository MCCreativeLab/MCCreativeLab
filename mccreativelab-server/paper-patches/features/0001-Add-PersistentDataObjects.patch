From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: verdox <mail.ysp@web.de>
Date: Mon, 27 Jan 2025 15:32:37 +0000
Subject: [PATCH] Add PersistentDataObjects


diff --git a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataContainer.java b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataContainer.java
index 9d867f1659433ea15f281c8b441db7e339013100..83aab7da3793fa862cd4804d7006ee6ccbacf8b2 100644
--- a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataContainer.java
+++ b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataContainer.java
@@ -20,6 +20,7 @@ public class CraftPersistentDataContainer extends io.papermc.paper.persistence.P
 
     private final Map<String, Tag> customDataTags = new HashMap<>();
     // Paper - move to PersistentDataContainerView
+    private final CraftPersistentDataObjectCache craftPersistentDataObjectCache; // Paper - Adding PersistentDataObjects
 
     public CraftPersistentDataContainer(Map<String, Tag> customTags, CraftPersistentDataTypeRegistry registry) {
         this(registry);
@@ -28,6 +29,7 @@ public class CraftPersistentDataContainer extends io.papermc.paper.persistence.P
 
     public CraftPersistentDataContainer(CraftPersistentDataTypeRegistry registry) {
         super(registry); // Paper - move to PersistentDataContainerView
+        this.craftPersistentDataObjectCache = new CraftPersistentDataObjectCache(this, registry, customDataTags); // Paper - Adding PersistentDataObjects
     }
 
     // Paper start
@@ -44,6 +46,9 @@ public class CraftPersistentDataContainer extends io.papermc.paper.persistence.P
         Preconditions.checkArgument(value != null, "The provided value cannot be null");
 
         this.customDataTags.put(key.toString(), this.registry.wrap(type, type.toPrimitive(value, this.adapterContext)));
+        // Paper start - Adding PersistentDataObjects
+        craftPersistentDataObjectCache.persistentDataObjectMap.remove(key); // Remove persistent data object if the key was taken by another entry
+        // Paper end - Adding PersistentDataObjects
     }
 
     // Paper - move to PersistentDataContainerView
@@ -52,7 +57,7 @@ public class CraftPersistentDataContainer extends io.papermc.paper.persistence.P
     @Override
     public Set<NamespacedKey> getKeys() {
         Set<NamespacedKey> keys = new HashSet<>();
-
+        craftPersistentDataObjectCache.saveObjectsToTags(true); // Paper - Adding PersistentDataObjects
         this.customDataTags.keySet().forEach(key -> {
             String[] keyData = key.split(":", 2);
             if (keyData.length == 2) {
@@ -66,25 +71,28 @@ public class CraftPersistentDataContainer extends io.papermc.paper.persistence.P
     @Override
     public void remove(@NotNull NamespacedKey key) {
         Preconditions.checkArgument(key != null, "The NamespacedKey key cannot be null");
-
+        this.craftPersistentDataObjectCache.removePersistentDataObject(key, false); // Paper - Adding PersistentDataObjects
         this.customDataTags.remove(key.toString());
     }
 
     @Override
     public boolean isEmpty() {
-        return this.customDataTags.isEmpty();
+        return this.customDataTags.isEmpty() && craftPersistentDataObjectCache.persistentDataObjectMap.isEmpty(); // Paper - Adding PersistentDataObjects
     }
 
     @NotNull
     @Override
     public void copyTo(PersistentDataContainer other, boolean replace) {
         Preconditions.checkArgument(other != null, "The target container cannot be null");
-
+        craftPersistentDataObjectCache.saveObjectsToTags(true); // Paper - Adding PersistentDataObjects
         CraftPersistentDataContainer target = (CraftPersistentDataContainer) other;
+        target.craftPersistentDataObjectCache.saveObjectsToTags(true); // Paper - Adding PersistentDataObjects
         if (replace) {
             target.customDataTags.putAll(this.customDataTags);
+            target.craftPersistentDataObjectCache.persistentDataObjectMap.putAll(this.craftPersistentDataObjectCache.persistentDataObjectMap); // Paper - Adding PersistentDataObjects
         } else {
             this.customDataTags.forEach(target.customDataTags::putIfAbsent);
+            this.craftPersistentDataObjectCache.persistentDataObjectMap.forEach(target.craftPersistentDataObjectCache.persistentDataObjectMap::putIfAbsent); // Paper - Adding PersistentDataObjects
         }
     }
 
@@ -102,11 +110,12 @@ public class CraftPersistentDataContainer extends io.papermc.paper.persistence.P
         Map<String, Tag> myRawMap = this.getRaw();
         Map<String, Tag> theirRawMap = ((CraftPersistentDataContainer) obj).getRaw();
 
-        return Objects.equals(myRawMap, theirRawMap);
+        return Objects.equals(myRawMap, theirRawMap) && this.craftPersistentDataObjectCache.persistentDataObjectMap.equals(((CraftPersistentDataContainer) obj).craftPersistentDataObjectCache.persistentDataObjectMap); // Paper - Adding PersistentDataObjects
     }
 
     public CompoundTag toTagCompound() {
         CompoundTag tag = new CompoundTag();
+        craftPersistentDataObjectCache.saveObjectsToTags(true); // Paper - Adding PersistentDataObjects
         for (Entry<String, Tag> entry : this.customDataTags.entrySet()) {
             tag.put(entry.getKey(), entry.getValue());
         }
@@ -148,6 +157,7 @@ public class CraftPersistentDataContainer extends io.papermc.paper.persistence.P
 
     // Paper start
     public void clear() {
+        this.craftPersistentDataObjectCache.persistentDataObjectMap.clear(); // Paper - Adding PersistentDataObjects
         this.customDataTags.clear();
     }
     // Paper end
@@ -168,9 +178,35 @@ public class CraftPersistentDataContainer extends io.papermc.paper.persistence.P
 
     // Paper start - deep clone tags
     public Map<String, Tag> getTagsCloned() {
+        craftPersistentDataObjectCache.saveObjectsToTags(false); // Paper - Adding PersistentDataObjects
         final Map<String, Tag> tags = new HashMap<>();
         this.customDataTags.forEach((key, tag) -> tags.put(key, tag.copy()));
         return tags;
     }
     // Paper end - deep clone tags
+
+    // Paper start - Adding PersistentDataObjects
+    @Override
+    public CraftPersistentDataObjectCache getPersistentDataObjectCache() {
+        return craftPersistentDataObjectCache;
+    }
+
+    @Override
+    public boolean has(NamespacedKey key) {
+        craftPersistentDataObjectCache.serializeObjectAtKeyBeforeLookup(key); // Paper - Adding PersistentDataObjects
+        return super.has(key);
+    }
+
+    @Override
+    public <P, C> boolean has(NamespacedKey key, PersistentDataType<P, C> type) {
+        craftPersistentDataObjectCache.serializeObjectAtKeyBeforeLookup(key); // Paper - Adding PersistentDataObjects
+        return super.has(key, type);
+    }
+
+    @Override
+    public <P, C> @org.checkerframework.checker.nullness.qual.Nullable C get(NamespacedKey key, PersistentDataType<P, C> type) {
+        craftPersistentDataObjectCache.serializeObjectAtKeyBeforeLookup(key); // Paper - Adding PersistentDataObjects
+        return super.get(key, type);
+    }
+// Paper end - Adding PersistentDataObjects
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/persistence/DirtyCraftPersistentDataContainer.java b/src/main/java/org/bukkit/craftbukkit/persistence/DirtyCraftPersistentDataContainer.java
index fc3a34b59b70a6f553e28ba5c61d8ad50f3cb9b5..8db2b82476b83a6388ce2d0d9c654ceeda3e1d57 100644
--- a/src/main/java/org/bukkit/craftbukkit/persistence/DirtyCraftPersistentDataContainer.java
+++ b/src/main/java/org/bukkit/craftbukkit/persistence/DirtyCraftPersistentDataContainer.java
@@ -60,4 +60,11 @@ public final class DirtyCraftPersistentDataContainer extends CraftPersistentData
         super.putAll(map);
         this.dirty(true);
     }
+
+    @Override
+    public CraftPersistentDataObjectCache getPersistentDataObjectCache() {
+        this.dirty(true);
+        return super.getPersistentDataObjectCache();
+    }
+
 }
